#+title: Parsing markdown with functions (with F#)
#+subtitle: An F# introduction
#+author: @paudirac
#+email: pau.cervera@gmail.com

#+REVEAL_ROOT: https://cdn.jsdelivr.net/reveal.js/3.0.0/
#+REVEAL_EXTRA_CSS: ./css/stylesheet.css
#+REVEAL_THEME: black

#+OPTIONS: toc:nil
#+OPTIONS: num:nil
#+OPTIONS: reveal_title_slide:nil

#+MACRO: color @@html:<font color="$1">$2</font>@@


* Parsing markdown with functions
  :PROPERTIES:
  :reveal_background: ./images/inception.jpg
  :END: 

  *Introducing F#*

* About me
  :PROPERTIES:
  :reveal_background_transition: zoom
  :reveal_background: ./images/headroom.gif
  :END:

  #+ATTR_REVEAL: :frag (appear)
  - I'm [[https://twitter.com/paudirac][@paudirac]]
  - I'm working at [[https://twitter.com/capside][@capside]]
  - I usually rant about Perl
  - I usually praise about functional programming
  - my knowledge of football reduces to: =I think there's a spherical ball=
  - so…, probably I meant soccer

** 
  :PROPERTIES:
  :reveal_background: ./images/physics.jpg
  :END:

  #+ATTR_REVEAL: :frag (appear)
  I'm an =evil= Emacs user.
* on the shoulders of
  :PROPERTIES:
  :reveal_background: ./images/brain.jpeg
  :END:

  #+ATTR_REVEAL: :frag (appear)
  - [[https://eprints.nottingham.ac.uk/223/1/pearl.pdf][Monadic parsing in Haskell, Hutton & Meijer]]
  - [[http://www.cs.nott.ac.uk/~pszgmh/monparsing.pdf][Monadic parser combinators, Hutton & Meijer]]
  - [[http://theorangeduck.com/page/you-could-have-invented-parser-combinators][You could have invented parser combinators]]
  - [[https://github.com/capside-functional-nomads/turning][turning, nomads]]
  - [[https://github.com/paudirac/perl-friends-2017.git][paudirac/perl-friends-2017, this repo on github]]

* 
  Are you ready?

* 
  :PROPERTIES:
  :reveal_background: ./images/pills2.jpg
  :END:

  #+ATTR_REVEAL: :frag (appear)
  #+begin_src basic :eval never
  REM outline
  NEW
  30 PRINT "building a parser/translator with functions"
  10 PRINT "building blocks"
  40 GOTO 90
  50 LET MEANING = 40 + 2
  90 PRINT "building a parser/compiler with functions and types"
  #+end_src

** 
  :PROPERTIES:
  :reveal_background: ./images/rabbit-hole.png
  :END:

   #+begin_src fsharp :eval never
   buildingBlocks |> buildingAParser |> buildingACompiler
   #+end_src


* 
  :PROPERTIES:
  :reveal_background: ./images/parental-advisory.jpg
  :END:

** F#
  :PROPERTIES:
  :reveal_background: ./images/fsharp.png
  :END:

   #+ATTR_REVEAL: :frag (appear)
   In the following, take into account that
   #+ATTR_REVEAL: :frag (appear)
   - whitespace is significant
   - we know the value of everything, but the cost of nothing
   - we hate the *state*
   - (even as citizens)

* building blocks (types)
  :PROPERTIES:
  :reveal_background: ./images/building-blocks-free.png
  :END:
  (introducing f#)

** (simple) types
  :PROPERTIES:
  :reveal_background: ./images/building-blocks-free.png
  :END:
   #+ATTR_REVEAL: :frag (appear)
   #+begin_src fsharp :eval never
   >42;;
   val it : int = 42
   #+end_src
   #+ATTR_REVEAL: :frag (appear)
   #+begin_src fsharp :eval never
   >"The meaning of life is %d";;
   val it : string = "The meaning of life is %d"
   #+end_src


** function types
  :PROPERTIES:
  :reveal_background: ./images/building-blocks-free.png
  :END:
   #+ATTR_REVEAL: :frag (appear)
   #+begin_src fsharp :eval never
   >sprintf "The meaning of life is %d";;
   val it : (int -> string)
   #+end_src


** function application 
  :PROPERTIES:
  :reveal_background: ./images/building-blocks-free.png
  :END:

   #+ATTR_REVEAL: :frag (appear)
   #+begin_src fsharp :eval never
   >sprintf "The meaning of life is %d" 42;;
   val it : string = "The meaning of life is 42"
   #+end_src

** let 
  :PROPERTIES:
  :reveal_background: ./images/ET_Moon.jpg
  :END:
  
   #+ATTR_REVEAL: :frag (appear)
   #+begin_src fsharp :eval never
   >let life = 42;;
   val life : int = 42
   #+end_src

   #+ATTR_REVEAL: :frag (appear)
   #+begin_src fsharp :eval never
   >let meaning = sprintf "The meaning of life is %d";;
   val meaning : (int -> string)
   #+end_src

   #+ATTR_REVEAL: :frag (appear)
   or 
   #+ATTR_REVEAL: :frag (appear)
   #+begin_src fsharp :eval never
   >let meaning i = sprintf "The meaning of life is %d" i;;
   val meaning : i:int -> string
   #+end_src

** function application (revisited)
  :PROPERTIES:
  :reveal_background: ./images/ET_Moon.jpg
  :END:

   #+ATTR_REVEAL: :frag (appear)
   #+begin_src fsharp :eval never
   >meaning life;;
   val it : string = "The meaning of life is 42"
   #+end_src

   #+ATTR_REVEAL: :frag (appear)
   #+begin_src fsharp :eval never
   >life |> meaning;;
   val it : string = "The meaning of life is 42"
   #+end_src

   #+ATTR_REVEAL: :frag (appear)
   #+begin_src fsharp :eval never
   >meaning <| 40 + 2;;
   val it : string = "The meaning of life is 42"
   #+end_src

* Parsing a char
  :PROPERTIES:
  :reveal_background: ./images/design.jpg
  :END:

  #+ATTR_REVEAL: :frag (appear)
  We would like to parse the character ~a~.
  
** Design
   :PROPERTIES:
   :reveal_background: ./images/design.jpg
   :END:
  
   #+ATTR_REVEAL: :frag (appear)
   The parser of =a= is a function that, given an input string
   =s=:

   #+ATTR_REVEAL: :frag (appear)
   - succeds parsing =a=
   - or fails parsing =a=

* REPL time 
  :PROPERTIES:
  :reveal_background: ./images/inception-free.jpg
  :END:

** 
  :PROPERTIES:
  :reveal_background: ./images/inception-free.jpg
  :END:


   #+begin_src fsharp :eval never
   
type Parsed =
    | Success of string * string
    | Failure of string

   #+end_src

** pChar
  :PROPERTIES:
  :reveal_background: ./images/inception-free.jpg
  :END:


   #+begin_src fsharp :eval never
   
let pChar c =
    function (s:string) -> let f = s.[0]
                           if f = c then Success (stringify c, s.[1..])
                           else Failure s

   #+end_src

** Recap
  :PROPERTIES:
  :reveal_background: ./images/monolith-apes.jpg
  :END:

   #+begin_src fsharp :eval never
   
let stringify x = x.ToString();

type Parsed =
    | Success of string * string
    | Failure of string

let pChar c =
    function (s:string) -> let f = s.[0]
                           if f = c then Success (stringify c, s.[1..])
                           else Failure s

   #+end_src

* parsing two chars 
  :PROPERTIES:
  :reveal_background: ./images/design2.jpg
  :END:

  #+ATTR_REVEAL: :frag (appear)
  We would like to parse the chars =ab=.


** Design
  :PROPERTIES:
  :reveal_background: ./images/design2.jpg
  :END:

  #+ATTR_REVEAL: :frag (appear)
  The parser of =ab= is a function that, given an input string
  =s=:

  #+ATTR_REVEAL: :frag (appear)
   - succeds parsing =ab=
   - or fails parsing =ab=

** generalize 
  :PROPERTIES:
  :reveal_background: ./images/design2.jpg
  :END:

  #+ATTR_REVEAL: :frag (appear)
  The would like a function that, given two parsers =p1= and =p2=
  will return a parser that, given an input string
  =s=:

  #+ATTR_REVEAL: :frag (appear)
   - will succeds parsing what =p1= parses and parsing what =p2= parses
   - or fails parsing

** 
  :PROPERTIES:
  :reveal_background: ./images/design2.jpg
  :END:

   #+begin_src fsharp :eval never
let pAnd p1 p2 =
    function (s:string) -> match p1 s with
                  | Failure f -> Failure f
                  | Success (f,r) -> match p2 r with
                                     | Success (f2, r2) -> Success (f + f2, r2)
                                     | _ -> Failure s
   #+end_src

   #+begin_src fsharp :eval never
val pAnd : p1:(string -> Parsed) -> p2:(string -> Parsed) -> _arg1:string -> Parsed
   #+end_src

* one abstraction level up
  :PROPERTIES:
  :reveal_background: ./images/monolith-moon.jpg
  :END:

   #+ATTR_REVEAL: :frag (appear)
   #+begin_src fsharp :eval never
let pA = pChar 'a'
let pB = pChar 'b'
let pAB = pAnd pA pB
   #+end_src

   #+ATTR_REVEAL: :frag (appear)
   Note that we are dealing directly with *objects*.

** expressivity
  :PROPERTIES:
  :reveal_background: ./images/monolith-moon.jpg
  :END:

   #+begin_src fsharp :eval never
let (<&>) p1 p2 = pAnd p1 p2
let pAB = pA <&> pB
   #+end_src

* 
  :PROPERTIES:
  :reveal_background: ./images/zen.jpg
  :END:

** 
  :PROPERTIES:
  :reveal_background: ./images/zen2.jpg
  :END:

    #+ATTR_REVEAL: :frag (appear)
    Recuerda tus sueños y lucha por ellos. 
    #+ATTR_REVEAL: :frag (appear)
    Debes saber qué quieres de la vida. 
    #+ATTR_REVEAL: :frag (appear)
    Solo hay una cosa que hace tu sueño imposible
    #+ATTR_REVEAL: :frag (appear)
    los putos compiladores.
    #+ATTR_REVEAL: :frag (appear)
    — Paulo Cohelo


* REPL time
  :PROPERTIES:
  :reveal_background: ./images/doc.jpg
  :END:

** markdown parser
   :PROPERTIES:
   :reveal_background: ./images/jupiter-monolith.jpg
   :END:

    #+ATTR_REVEAL: :frag (appear)
    #+begin_src fsharp :eval never
 let pUpper = ['A'..'Z'] |> Seq.map pChar |> pAny
 let pLower = ['a'..'z'] |> Seq.map pChar |> pAny
 let pAlpha = pUpper <|> pLower
 let pExtra = ['!'; '?'; '*'] |> Seq.map pChar |> pAny
 let pValid = pAlpha <|> pExtra
 let pSpace = pChar ' '
 let pWhite = pMany1 pSpace
 let pWord = pMany1 pAlpha
 let pUnmarkedText = pMany (pWord <|> pWhite)
 let rec pBold = pChar '*' <&> ((fun s -> pItalic s) <|> 
                         pUnmarkedText) <&> pChar '*' |> pApply (wrapWith "b")
 and pItalic = pChar '_' <&> ((fun s -> pBold s) <|> 
                     pUnmarkedText) <&> pChar '_' |> pApply (wrapWith "i")
 and pMarkedText = pUnmarkedText <|> (fun s -> pBold s) <|> (fun s -> pItalic s)
 and pText = pMany (pUnmarkedText <|> pMarkedText)
    #+end_src

* case study: pSeq
  :PROPERTIES:
  :reveal_background: ./images/design4.jpg
  :END:

** design
  :PROPERTIES:
  :reveal_background: ./images/design4.jpg
  :END:

  #+ATTR_REVEAL: :frag (appear)
  The would like a function that, given a sequences of parsers =ps=
  will return a parser that, given an input string
  =s=:

  #+ATTR_REVEAL: :frag (appear)
   - will succeds parsing what =p1= parses and keep parsing what =p2= parses,
     thill the 
   - or fails parsing

** recursive
  :PROPERTIES:
  :reveal_background: ./images/design4.jpg
  :END:

  [[https://www.google.es/search?q=recursion][what is recursion?]]

  #+ATTR_REVEAL: :frag (appear)
   #+begin_src fsharp :eval never
let pSeq ps =
    let plist = ps |> Seq.toList
    function s ->
        let rec parse parsers acc rest =
            match parsers with
            | [] -> Success (acc, rest)
            | p::ps' -> let r = p rest
                        match r with
                        | Success (a, b) -> parse ps' (acc + a) b
                        | Failure f -> r
        parse plist "" s
   #+end_src

** how fold works
  :PROPERTIES:
  :reveal_background: ./images/design4.jpg
  :END:

  #+ATTR_REVEAL: :frag (appear)
   From the docs:
  #+ATTR_REVEAL: :frag (appear)
   #+begin_src fsharp :eval never
Seq.fold : ('State -> 'T -> 'State) -> 'State -> seq<'T> -> 'State
   #+end_src

  #+ATTR_REVEAL: :frag (appear)
   #+begin_src fsharp :eval never
> Seq.fold (fun acc n -> acc + (sprintf "%d" n)) "" [1;2;3];;
val it : string = "123"
> Seq.fold;;
val it : (('a -> 'b -> 'a) -> 'a -> seq<'b> -> 'a)
   #+end_src

** fold over parsers
  :PROPERTIES:
  :reveal_background: ./images/monolith-elder.png
  :END:

   #+begin_src fsharp :eval never
let pSeq' (ps: Parser seq) =
    let folder (acc: Parser) (p: Parser) : Parser = acc <&> p
    Seq.fold folder pUnit ps    
   #+end_src

* one abstraction level up 

** unknown territory
  :PROPERTIES:
  :reveal_background: ./images/mars.jpg
  :END:

** unit, zero & succeed
  :PROPERTIES:
  :reveal_background: ./images/mars.jpg
  :END:

   #+begin_src fsharp :eval never
let pAdvance = 
    function s -> match explode s with
                    | [] -> Failure s
                    | c::cs -> Success (implode [c], implode cs)

let succeed v = function s -> Success(v, s)

let pZero = function s -> Failure s
let pUnit = succeed ""
   #+end_src

** bind
  :PROPERTIES:
  :reveal_background: ./images/mars.jpg
  :END:

   #+begin_src fsharp :eval never
let pBind p f =
    function s -> match p s with
                    | Success (s', r) -> let p' = f s' in p' r
                    | _ -> Failure s

let (>>=) p f = pBind p f

let succeed v = function s -> Success(v, s)
   #+end_src

** introducing bind
  :PROPERTIES:
  :reveal_background: ./images/mars.jpg
  :END:

  #+ATTR_REVEAL: :frag (appear)
   #+begin_src fsharp :eval never
> (pA >>= fun a -> pB >>= fun b -> pC >>= fun c -> 
          pUnit >>= fun empty -> succeed (a + b + c + empty)) "abcdefgh";;
val it : Parsed = Success ("abc","defgh")
> (pA >>= fun a -> pB >>= fun b -> pC >>= fun c -> 
          pUnit >>= fun empty -> succeed (a + b + c + empty)) "aaaabcdefgh";;
val it : Parsed = Failure "aaabcdefgh"
   #+end_src

  #+ATTR_REVEAL: :frag (appear)
   #+begin_src fsharp :eval never
> (pA >>= fun a ->
-            pB >>= fun b ->
-                       succeed (a + b)) "abcdef";;
val it : Parsed = Success ("ab","cdef")
   #+end_src

  #+ATTR_REVEAL: :frag (appear)
   #+begin_src fsharp :eval never
> let abc = a >>= fun a' -> b >>= fun b' -> c >>= fun c' -> succeed (a' + b' + c');;
val abc : (string -> Parsed)
> abc "abcdef";;
val it : Parsed = Success ("abc","def")
   #+end_src

* THANKS
